#################################################################################
#                               OneBranch Pipelines                             #
# This pipeline was created by EasyStart from a sample located at:              #
#   https://aka.ms/obpipelines/easystart/samples                                #
# Documentation:  https://aka.ms/obpipelines                                    #
# Yaml Schema:    https://aka.ms/obpipelines/yaml/schema                        #
# Retail Tasks:   https://aka.ms/obpipelines/tasks                              #
# Support:        https://aka.ms/onebranchsup                                   #
#################################################################################

name: $(BuildDefinitionName)_$(date:yyMM).$(date:dd)$(rev:rrr)

# https://aka.ms/obpipelines/triggers
trigger:
  batch: true
  branches:
    include:
    - main
    - publish

schedules:
- cron: "0 8 * * *" # Daily at 8am UTC (midnight PST/1am PDT)
  displayName: Daily build
  always: true # Run even if there has been no churn (to detect build breaks due to container changes)
  branches:
    include:
    - main

variables:
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] # needed for onebranch.pipeline.version task https://aka.ms/obpipelines/versioning
  ONEBRANCH_AME_ACR_LOGIN: onebranch.azurecr.io
  WindowsContainerImage: 'onebranch.azurecr.io/windows/ltsc2019/vse2022:latest'

resources:
  repositories:
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  template: v2/OneBranch.Official.CrossPlat.yml@templates # https://aka.ms/obpipelines/templates
  parameters:
    featureFlags:
      LinuxHostVersion:
        Network: R1
      EnableCDPxPAT: false
      needExceptionForUbuntuUsage: true # Mariner does not currently support all of our cross-compilation targets
    globalSdl: # https://aka.ms/obpipelines/sdl
      isNativeCode: true
      tsa:
        enabled: false # Disable TSA to force build breaks
      policheck:
        break: true # always break the build on policheck issues.
      binskim:
        enabled: false # Temporarily disable binskim until we sort out BA2018 errors
      credscanSuppressionsPath: $(Build.SourcesDirectory)/.config/CredScanSuppressions.json

    stages:
    - stage: Set_Version
      jobs:
      - job: set_version
        displayName: Set Version
        pool:
          type: linux
        variables:
          ONEBRANCH_AME_ACR_LOGIN: onebranch.azurecr.io
          LinuxContainerImage: 'onebranch.azurecr.io/linux/ubuntu-2204:latest'
          ob_outputDirectory: $(Build.SourcesDirectory)/bin
        steps:
        - task: PythonScript@0
          displayName: 'Set version number'
          name: verStep
          inputs:
            scriptSource: 'filePath'
            scriptPath: scripts/version.py
            arguments: '--devops'
            workingDirectory: $(Build.SourcesDirectory)
        - task: onebranch.pipeline.version@1
          inputs:
            system: 'Custom'
            customVersion: '$(verStep.VER_MAJOR).$(verStep.VER_MINOR).$(verStep.VER_PATCH)-$(Build.BuildId)'

    - stage: Build_Windows
      displayName: Build Windows
      jobs:
      - template: .pipelines/templates/build-windows-cmake.yml@self
        parameters:
          targetArch: 'AMD64'
          config: 'Debug'
          sign: true
      - template: .pipelines/templates/build-windows-cmake.yml@self
        parameters:
          targetArch: 'AMD64'
          config: 'Release'
          sign: true
      - template: .pipelines/templates/build-windows-cmake.yml@self
        parameters:
          targetArch: 'X86'
          config: 'Debug'
          sign: true
      - template: .pipelines/templates/build-windows-cmake.yml@self
        parameters:
          targetArch: 'X86'
          config: 'Release'
          sign: true
      - template: .pipelines/templates/build-windows-cmake.yml@self
        parameters:
          targetArch: 'AMD64'
          config: 'Release'
          sign: true
          additionalArgs: '--no-asm'
          identifier: 'NoAsm'
      - template: .pipelines/templates/build-windows-cmake.yml@self
        parameters:
          targetArch: 'X86'
          config: 'Release'
          sign: true
          additionalArgs: '--no-asm'
          identifier: 'NoAsm'

    - stage: Build_Linux_AMD64_host
      displayName: Build Linux AMD64 host
      jobs:
      - template: .pipelines/templates/build-linux.yml@self
        parameters:
          targetArch: 'AMD64'
          config: 'Debug'
          cc: 'gcc'
          cxx: 'g++'
          openssl: true
      - template: .pipelines/templates/build-linux.yml@self
        parameters:
          targetArch: 'AMD64'
          config: 'Sanitize'
          cc: 'gcc'
          cxx: 'g++'
          openssl: true
      - template: .pipelines/templates/build-linux.yml@self
        parameters:
          targetArch: 'AMD64'
          config: 'Release'
          cc: 'gcc'
          cxx: 'g++'
          openssl: true
      - template: .pipelines/templates/build-linux.yml@self
        parameters:
          targetArch: 'AMD64'
          config: 'Debug'
          cc: 'clang'
          cxx: 'clang++'
          openssl: true
      - template: .pipelines/templates/build-linux.yml@self
        parameters:
          targetArch: 'AMD64'
          config: 'Sanitize'
          cc: 'clang'
          cxx: 'clang++'
          openssl: true
      - template: .pipelines/templates/build-linux.yml@self
        parameters:
          targetArch: 'AMD64'
          config: 'Release'
          cc: 'clang'
          cxx: 'clang++'
          openssl: true
      - template: .pipelines/templates/build-linux.yml@self
        parameters:
          targetArch: 'AMD64'
          config: 'Release'
          cc: 'gcc'
          cxx: 'g++'
          additionalArgs: '--no-asm'
          openssl: true
          identifier: 'NoAsm'
      - template: .pipelines/templates/build-linux.yml@self
        parameters:
          targetArch: 'AMD64'
          config: 'Release'
          cc: 'clang'
          cxx: 'clang++'
          additionalArgs: '--no-asm'
          openssl: true
          identifier: 'NoAsm'
      - template: .pipelines/templates/build-linux.yml@self
        parameters:
          targetArch: 'X86'
          config: 'Release'
          cc: 'gcc'
          cxx: 'g++'
          additionalArgs: '--no-asm --no-fips'
          identifier: 'NoAsm'
      - template: .pipelines/templates/build-linux.yml@self
        parameters:
          targetArch: 'X86'
          config: 'Release'
          cc: 'clang'
          cxx: 'clang++'
          additionalArgs: '--no-asm --no-fips'
          identifier: 'NoAsm'
      - template: .pipelines/templates/build-linux.yml@self
        parameters:
          targetArch: 'ARM64'
          config: 'Debug'
          cc: 'clang'
          cxx: 'clang++'
          additionalArgs: '--toolchain=cmake-configs/Toolchain-Clang-ARM64.cmake'
      - template: .pipelines/templates/build-linux.yml@self
        parameters:
          targetArch: 'ARM64'
          config: 'Release'
          cc: 'clang'
          cxx: 'clang++'
          additionalArgs: '--toolchain=cmake-configs/Toolchain-Clang-ARM64.cmake'
      - template: .pipelines/templates/build-linux.yml@self
        parameters:
          targetArch: 'ARM'
          config: 'Debug'
          cc: 'gcc'
          cxx: 'g++'
          additionalArgs: '--toolchain=cmake-configs/Toolchain-GCC-ARM.cmake'
      - template: .pipelines/templates/build-linux.yml@self
        parameters:
          targetArch: 'ARM'
          config: 'Release'
          cc: 'gcc'
          cxx: 'g++'
          additionalArgs: '--toolchain=cmake-configs/Toolchain-GCC-ARM.cmake'

    - stage: Build_Linux_ARM64_host
      displayName: Build Linux ARM64 host
      jobs:
      - template: .pipelines/templates/build-linux.yml@self
        parameters:
          hostArch: 'ARM64'
          targetArch: 'ARM64'
          config: 'Debug'
          cc: 'clang'
          cxx: 'clang++'
      - template: .pipelines/templates/build-linux.yml@self
        parameters:
          hostArch: 'ARM64'
          targetArch: 'ARM64'
          config: 'Sanitize'
          cc: 'clang'
          cxx: 'clang++'
      - template: .pipelines/templates/build-linux.yml@self
        parameters:
          hostArch: 'ARM64'
          targetArch: 'ARM64'
          config: 'Release'
          cc: 'clang'
          cxx: 'clang++'

    - stage: Build_macOS
      displayName: Build macOS
      jobs:
      - template: .pipelines/templates/build-mac.yml@self
        parameters:
          targetArch: 'AMD64'
          config: 'Debug'
          additionalArgs: '--no-asm --no-fips'
      - template: .pipelines/templates/build-mac.yml@self
        parameters:
          targetArch: 'AMD64'
          config: 'Release'
          additionalArgs: '--no-asm --no-fips'
      - template: .pipelines/templates/build-mac.yml@self
        parameters:
          targetArch: 'ARM64'
          config: 'Debug'
          additionalArgs: '--no-asm --no-fips'
          skipTests: true
      - template: .pipelines/templates/build-mac.yml@self
        parameters:
          targetArch: 'ARM64'
          config: 'Release'
          additionalArgs: '--no-asm --no-fips'
          skipTests: true
