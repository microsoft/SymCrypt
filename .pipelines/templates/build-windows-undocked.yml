# This template is for building, signing, packaging and ingesting undocked Windows binaries.
parameters:
  - name: lkgCompilerBranch
    type: string
    default: 'official/main'
  - name: nativeCompiler
    type: boolean
    default: true
  - name: buildType
    type: string
    values:
    - Official
    - PR
    default: 'PR'
  - name: sign
    type: boolean
    default: false

jobs:
# Build the solution for all the necessary configurations.
- job: build_sln
  displayName: Build
  strategy:
    matrix:
        x86chk:
          ob_build_platform: x86
          ob_build_platform_win: x86
          ob_build_config: Debug
          ob_build_config_win: chk
        x86fre:
          ob_build_platform: x86
          ob_build_platform_win: x86
          ob_build_config: Release
          ob_build_config_win: fre
        amd64chk:
          ob_build_platform: x64
          ob_build_platform_win: amd64
          ob_build_config: Debug
          ob_build_config_win: chk
        amd64fre:
          ob_build_platform: x64
          ob_build_platform_win: amd64
          ob_build_config: Release
          ob_build_config_win: fre
        arm64chk:
          ob_build_platform: arm64
          ob_build_platform_win: arm64
          ob_build_config: Debug
          ob_build_config_win: chk
        arm64fre:
          ob_build_platform: arm64
          ob_build_platform_win: arm64
          ob_build_config: Release
          ob_build_config_win: fre

  pool:
    type: windows

  variables:
    solution_name: 'symcrypt.sln'
    # OneBranch Variables
    ob_outputDirectory: $(Build.SourcesDirectory)\build\bin\$(ob_build_platform_win)$(ob_build_config_win)
    ob_artifactSuffix: _$(ob_build_platform_win)$(ob_build_config_win)
    # https://aka.ms/obpipelines/sdl
    # When TSA is enabled bugs are filed on SDL errors. When TSA is disabled, most SDL tools break the build.
    # Make official builds file bugs but PR builds just break the build.
    ${{ if eq(parameters.buildType, 'official') }}:
      ob_sdl_tsa_enabled: true 
    ${{ if eq(parameters.buildType, 'pr') }}:
      ob_sdl_tsa_enabled: false
    ob_sdl_binskim_break: true
    ob_sdl_policheck_break: true
    ob_sdl_prefast_enabled: true
    ob_sdl_prefast_runDuring: 'Guardian'
    ob_sdl_prefast_excludedPaths: 'c:\\program files (x86)\\windows kits\\#$(Build.SourcesDirectory)\\unittest\\symcryptdependencies\\inc\\'
    ob_sdl_prefast_break: true
    ob_sdl_checkCompliantCompilerWarnings: true
    ob_sdl_codeSignValidation_excludes: -|**\*.sys # Signing is not supported for KM drivers
    # https://eng.ms/docs/cloud-ai-platform/azure-edge-platform-aep/aep-engineering-systems/productivity-and-experiences/onebranch-windows-undocked/onebranch-windows-undocked/test/onebranchwindowsundocked
    ob_NativeCompiler_enabled: ${{ parameters.nativeCompiler }}
    ob_NativeCompiler_TaskVerbosity: 'Detailed'
    ob_NativeCompiler_UseOSBranchVersion: true
    ob_NativeCompiler_TargetOsBranch: ${{ parameters.lkgCompilerBranch }}
    ob_NativeCompiler_UcrtPlatform: $(ob_build_platform_win)

  steps:
  # Overwrite default artifact publishing with our copy (enables publishing binaries for failed runs)
  - task: PowerShell@2
    displayName: 'Overwrite .artifactignore'
    inputs:
      targetType: 'inline'
      script: |
        Copy-Item .artifactignore "$(ob_outputDirectory)\.artifactignore"

  - task: VSBuild@1
    displayName: 'Invoke MSBuild'
    target: windows_build_container
    inputs:
      solution: $(solution_name)
      platform: $(ob_build_platform)
      configuration: $(ob_build_config)
      maximumCpuCount: true
      msbuildArchitecture: 'x64'
      msbuildArgs: '-p:UndockedOfficial=${{ parameters.nativeCompiler }} -p:UndockedBuildId=$(Build.BuildId) -p:VER_BUILD_ID=$(Build.BuildId) -p:VER_SUFFIX=${{ parameters.buildType }}'

  - task: onebranch.pipeline.signing@1 # https://aka.ms/obpipelines/signing
    displayName: 'Sign Binaries'
    condition: ${{ eq(parameters.sign, true) }}
    target: windows_build_container
    inputs:
      command: 'sign'
      signing_profile: 'external_distribution'
      files_to_sign: '**\*.exe;**\*.dll'
      search_root: $(ob_outputDirectory)

  - task: PythonScript@0
    displayName: 'Copy files to package'
    inputs:
      scriptSource: 'filePath'
      scriptPath: scripts\package.py
      arguments: --no-archive $(ob_outputDirectory) $(ob_build_platform_win) $(ob_build_config) Windows $(ob_outputDirectory)\pkg
      workingDirectory: $(Build.SourcesDirectory)