parameters:
- name: hostArch
  type: string
  values:
  - AMD64
  - ARM64
  default: AMD64
- name: targetArch
  type: string
  values:
  - AMD64
  - X86
  - ARM64
  - ARM
- name: config
  type: string
  values:
  - Debug
  - Release
  - Sanitize
- name: cc
  type: string
  values:
  - gcc
  - clang
- name: cxx
  type: string
  values:
  - g++
  - clang++
- name: skipTests # Skip time-consuming tests for PR builds (e.g. no-ASM build)
  type: boolean
  default: false
- name: additionalArgs # Additional arguments to pass to the build script
  type: string
  default: ''
- name: identifier # Additional identifier for job name
  type: string
  default: ''
- name: openssl # Build with OpenSSL testing
  type: boolean
  default: false
- name: libcrux # Build with libcrux testing
  type: boolean
  default: false

jobs:
- job: Linux_${{ parameters.hostArch }}_${{ parameters.targetArch}}_${{ parameters.cc }}_${{parameters.config}}_${{parameters.identifier}}
  displayName: Linux ${{ parameters.hostArch }} host ${{ parameters.targetArch}} ${{ parameters.cc }} ${{parameters.config}} ${{ parameters.identifier }}

  pool:
    type: linux
    ${{ if eq(parameters.hostArch, 'AMD64') }}:
      hostArchitecture: amd64
    ${{ else }}:
      hostArchitecture: arm64

  variables:
    ONEBRANCH_AME_ACR_LOGIN: onebranch.azurecr.io
    ${{ if and(eq(parameters.cc, 'gcc'), in(parameters.targetArch, 'AMD64', 'ARM64')) }}:
      PythonPath: '/usr/bin/python3'
      DistroFlavor: 'AzureLinux'
      LinuxContainerImage: 'mcr.microsoft.com/onebranch/azurelinux/build:3.0'
      ${{ if eq(parameters.openssl, true) }}:
        openssl_build_flag: '--openssl'
      ${{ else }}:
        openssl_build_flag: ''
    ${{ else }}:
      PythonPath: '/usr/bin/python'
      DistroFlavor: 'Ubuntu'
      ${{ if eq(parameters.hostArch, 'AMD64') }}:
        LinuxContainerImage: 'onebranch.azurecr.io/linux/ubuntu-2004:latest'
      ${{ else }}:
        LinuxContainerImage: 'onebranch.azurecr.io/linux/ubuntu-2004-arm64:latest'
      ${{ if eq(parameters.openssl, true) }}:
        openssl_build_flag: '--openssl-build-from-source'
      ${{ else }}:
        openssl_build_flag: ''     
    ob_outputDirectory: $(Build.SourcesDirectory)/bin
    ob_sdl_binskim_break: ${{ eq(parameters.config, 'Release') }} # Only break on binskim failures for Release binaries https://aka.ms/obpipelines/sdl
    ${{ if eq(variables['system.debug'], true) }}:
      verbose_build_flag: '--verbose'
    ${{ else }}:
      verbose_build_flag: ''
    ${{ if eq(parameters.libcrux, true) }}:
      libcrux_build_flag: '--libcrux'
    ${{ else }}:
      libcrux_build_flag: ''

  steps:
    - ${{ if eq(variables.DistroFlavor, 'AzureLinux') }}:
      - ${{ if and(eq(parameters.hostArch, 'AMD64'), eq(parameters.targetArch, 'ARM64')) }}:
        - script: |
            tdnf install -y binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu gcc-c++-aarch64-linux-gnu qemu-user
          displayName: 'Install arm64 cross-compilation tools'
      - ${{ if eq(parameters.openssl, true) }}:
        - script: |
            tdnf install -y openssl-devel
          displayName: 'Install OpenSSL'
    - ${{ else }}:
      - script: |
          apt-get update -y
        continueOnError: true
        displayName: 'Update package manager'

      # Install clang-11 and manually add symlinks so that it can be run via just "clang" rather
      # than clang-11. This is required because we can't explicitly specify clang-11 for
      # parameters.cc (it breaks the job name, because job names aren't allowed to have '-' in them)
      - script: |
          apt-get install -y clang-11
          ln -s /usr/bin/clang-11 /usr/bin/clang
          ln -s /usr/bin/clang++-11 /usr/bin/clang++
        displayName: 'Install clang'

      - ${{ if eq(parameters.hostArch, 'AMD64') }}:
        - ${{ if eq(parameters.targetArch, 'X86') }}:
          - script: |
              apt-get install -y gcc-multilib g++-multilib
            displayName: 'Install x86 headers and libraries'

        - ${{ if eq(parameters.targetArch, 'ARM64') }}:
          - script: |
              apt-get install -y binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu g++-aarch64-linux-gnu qemu-user
            displayName: 'Install arm64 cross-compilation tools'

      - ${{ if eq(parameters.targetArch, 'ARM') }}:
        - script: |
            apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf qemu-user
          displayName: 'Install arm cross-compilation tools'

    - task: PipAuthenticate@1
      inputs:
        artifactFeeds: 'OS/SymCrypt_PublicPackages'

    - script: |
        pip install -v -r scripts/requirements.txt
      displayName: 'Install Python dependencies'

    - task: PythonScript@0
      displayName: 'Run build script'
      inputs:
        scriptSource: 'filePath'
        scriptPath: scripts/build.py
        arguments: 'cmake bin --arch ${{ parameters.targetArch }} --config ${{ parameters.config }} --cc ${{ parameters.cc }} --cxx ${{ parameters.cxx }} ${{ parameters.additionalArgs }} $(verbose_build_flag) $(openssl_build_flag) $(libcrux_build_flag)'
        workingDirectory: $(Build.SourcesDirectory)
        pythonInterpreter: $(PythonPath)

    # Overwrite default artifact publishing with our copy (enables publishing binaries for failed runs)
    - script: |
          cp .artifactignore "$(ob_outputDirectory)/.artifactignore"
      displayName: 'Overwrite .artifactignore'

    # Disable ASAN link order verification
    # This is a workaround for intermittent failures due to "ASan runtime does not come first in initial library list"
    # https://github.com/google/sanitizers/issues/796
    - script: |
        echo '##vso[task.setvariable variable=ASAN_OPTIONS]verify_asan_link_order=0'
      displayName: 'Disable ASAN link order verification'

    - ${{ if ne(parameters.skipTests, true) }}:
      - ${{ if or(eq(parameters.hostArch, parameters.targetArch), and(eq(parameters.hostArch, 'AMD64'), eq(parameters.targetArch, 'X86'))) }}:
        - ${{ if eq(parameters.config, 'Sanitize') }}:
          - task: PythonScript@0
            displayName: 'Run unit tests'
            # ASAN occasionally gets stuck in an infinite loop due to an incompatibility with high-entropy ASLR
            # This issue is fixed in gcc 14+, but will continue to repro on AZL3. For now, we just timeout and
            # retry the test since it is not a common repro.
            ${{ if eq(variables.DistroFlavor, 'AzureLinux') }}:
              retryCountOnTaskFailure: 2
            inputs:
              scriptSource: 'filePath'
              scriptPath: scripts/test.py
              arguments: 'bin noperftests'
              workingDirectory: $(Build.SourcesDirectory)
              pythonInterpreter: $(PythonPath)
            env:
              ASAN_OPTIONS: 'fast_unwind_on_malloc=0'
              
        - ${{ else }}:
          - task: PythonScript@0
            displayName: 'Run dynamic unit tests'
            inputs:
              scriptSource: 'filePath'
              scriptPath: scripts/test.py
              arguments: 'bin dynamic:bin/module/generic/libsymcrypt.so noperftests'
              workingDirectory: $(Build.SourcesDirectory)
              pythonInterpreter: $(PythonPath)
        
        # On AZL3, glibc does not respect the "-AVX2_Usable" tunable so this test fails
        - ${{ if and(eq(variables.DistroFlavor, 'Ubuntu'), eq(parameters.targetArch, 'AMD64')) }}:
          - task: PythonScript@0
            displayName: 'Run unit tests (test YMM save/restore)'
            inputs:
              scriptSource: 'filePath'
              scriptPath: scripts/test.py
              arguments: '--glibc-disable-ymm bin testSaveYmm'
              workingDirectory: $(Build.SourcesDirectory)
              pythonInterpreter: $(PythonPath)

      - ${{ if and(eq(parameters.hostArch, 'AMD64'), eq(parameters.targetArch, 'ARM64')) }}:
          - task: PythonScript@0
            displayName: 'Run dynamic unit tests'
            inputs:
              scriptSource: 'filePath'
              scriptPath: scripts/test.py
              arguments: '--emulator qemu-aarch64 --emulator-lib-dir /usr/aarch64-linux-gnu/ bin dynamic:bin/module/generic/libsymcrypt.so noperftests +symcrypt -dh -dsa -rsa'
              workingDirectory: $(Build.SourcesDirectory)
              pythonInterpreter: $(PythonPath)

      - ${{ if eq(parameters.targetArch, 'ARM') }}:
        - task: PythonScript@0
          displayName: 'Run dynamic unit tests'
          inputs:
            scriptSource: 'filePath'
            scriptPath: scripts/test.py
            arguments: '--emulator qemu-arm --emulator-lib-dir /usr/arm-linux-gnueabihf/ bin dynamic:bin/module/generic/libsymcrypt.so noperftests +symcrypt -dh -dsa -rsa'
            workingDirectory: $(Build.SourcesDirectory)
            pythonInterpreter: $(PythonPath)

    - task: PythonScript@0
      displayName: 'Package generic Linux module'
      inputs:
        scriptSource: 'filePath'
        scriptPath: scripts/package.py
        arguments: 'bin ${{ parameters.targetArch }} ${{ parameters.config }} generic bin'
        workingDirectory: $(Build.SourcesDirectory)
        pythonInterpreter: $(PythonPath)

    - task: Bash@3
      displayName: 'Check if OpenEnclave module exists'
      inputs:
        targetType: inline
        script: |
          if [ -d bin/module/oe_full ]; then
            echo "##vso[task.setVariable variable=PACKAGE_OE]true"
          fi

    - task: PythonScript@0
      displayName: 'Package OpenEnclave module'
      condition: eq(variables.PACKAGE_OE, 'true')
      inputs:
        scriptSource: 'filePath'
        scriptPath: scripts/package.py
        arguments: 'bin ${{ parameters.targetArch }} ${{ parameters.config }} oe_full bin'
        workingDirectory: $(Build.SourcesDirectory)
        pythonInterpreter: $(PythonPath)
